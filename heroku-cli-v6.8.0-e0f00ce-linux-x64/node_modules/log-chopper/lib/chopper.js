'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _line_by_line = require('../vendor/line_by_line');

var _line_by_line2 = _interopRequireDefault(_line_by_line);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LOG_CHOPPER_MAX = parseInt(process.env.LOG_CHOPPER_MAX || 100000);

/**
 * Utility for truncating logs
 * @class
 */

class LogChopper {
  /**
   * chop a log file in half
   * @param {string} filepath - log path
   * @example
   * ```js
   * const chopper = require('log-chopper')
   * await chopper.chop('/path/to/log')
   * ```
   */
  static async chop(filepath, logLineMax = LOG_CHOPPER_MAX) {
    let file = _path2.default.normalize(filepath);
    let lines = [];
    let log = new _line_by_line2.default(file);
    var line;
    while ((line = await log.readLine()) !== null) {
      if (lines.length >= logLineMax) lines.shift();
      lines.push(line);
    }
    let logLength = lines.length;
    if (logLength >= logLineMax) {
      let truncLines = lines.slice(~~(logLength / 2), logLength);
      _fsExtra2.default.outputFileSync(file, truncLines.join('\n'));
    }
  }
}
exports.default = LogChopper;