#!/bin/bash

set -ex

get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)

VERSION=`$DIR/version`

PLATFORMS=(
  win32-x86
  win32-x64
  darwin-x64
  linux-x86
  linux-x64
)

if [ $# -ne 1 ]; then
  echo "USAGE: $0 CHANNEL"
  exit 1
fi

CHANNEL=$1
NAME=`node -p "require('./package.json').name"`
S3_BUCKET=`node -p "require('./package.json')['cli-engine'].s3.bucket"`

function release {
  $DIR/cli-build $PLATFORM $CHANNEL
  remote_base=s3://$S3_BUCKET/$NAME/channels/$CHANNEL
  aws s3 cp --cache-control max-age=86400 tmp/build/$NAME-v$VERSION-$PLATFORM.tar.xz $remote_base/$NAME-v$VERSION-$PLATFORM.tar.xz
  aws s3 cp --cache-control max-age=300 $remote_base/$NAME-v$VERSION-$PLATFORM.tar.xz $remote_base/$NAME-$PLATFORM.tar.xz
  aws s3 cp --cache-control max-age=86400 tmp/build/$NAME-v$VERSION-$PLATFORM.tar.gz $remote_base/$NAME-v$VERSION-$PLATFORM.tar.gz
  aws s3 cp --cache-control max-age=300 $remote_base/$NAME-v$VERSION-$PLATFORM.tar.gz $remote_base/$NAME-$PLATFORM.tar.gz
  aws s3 cp --cache-control max-age=300 --content-type application/json tmp/build/$PLATFORM $remote_base/$PLATFORM
}

pids=""
RESULT=0

for PLATFORM in "${PLATFORMS[@]}"; do
  release &
  pids="$pids $!"
  sleep 3
done

for pid in $pids; do
  wait $pid || let "RESULT=1"
done

if [ $RESULT -ne 0 ]; then
  exit $RESULT
fi
