'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('./fs');

var _cliEngineCommand = require('cli-engine-command');

var _cliEngineCommand2 = _interopRequireDefault(_cliEngineCommand);

var _cliEngineConfig = require('cli-engine-config');

var _output = require('cli-engine-command/lib/output');

var _output2 = _interopRequireDefault(_output);

var _plugins = require('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _analytics = require('./analytics');

var _analytics2 = _interopRequireDefault(_analytics);

var _updater = require('./updater');

var _updater2 = _interopRequireDefault(_updater);

var _not_found = require('./not_found');

var _not_found2 = _interopRequireDefault(_not_found);

var _migrator = require('./migrator');

var _migrator2 = _interopRequireDefault(_migrator);

var _help = require('./commands/help');

var _help2 = _interopRequireDefault(_help);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const handleEPIPE = err => {
  if (err.code !== 'EPIPE') throw err;
};

let out;
process.once('exit', () => out ? out.showCursor() : null);
process.once('SIGINT', () => out ? out.exit(1) : process.exit(1));
let handleErr = err => {
  if (!out) throw err;
  out.error(err);
};
process.once('uncaughtException', handleErr);
process.once('unhandledRejection', handleErr);
process.stdout.on('error', handleEPIPE);
process.stderr.on('error', handleEPIPE);

class Main {

  constructor(options) {
    this.mock = !!options.mock;
    this.argv = options.argv;
    this.config = (0, _cliEngineConfig.buildConfig)(options.config);
    out = new _output2.default({ config: this.config, mock: this.mock });
  }

  async run() {
    const updater = new _updater2.default(out);
    let plugins = new _plugins2.default(out);

    const migrator = new _migrator2.default(plugins, this.config);
    const migrated = await migrator.run();
    if (migrated) {
      plugins = new _plugins2.default(out);
    }

    await updater.autoupdate();
    await plugins.refreshLinkedPlugins();
    if (this.cmdAskingForHelp) {
      this.cmd = await _help2.default.run({ argv: this.argv.slice(1), config: this.config, mock: this.mock });
    } else {
      let Command = plugins.findCommand(this.argv[1] || this.config.defaultCommand);
      if (!Command) return new _not_found2.default(out, this.argv).run();
      await out.done();
      let analytics = new _analytics2.default({ config: this.config, out, plugins });
      analytics.record(Command);
      this.cmd = await Command.run({ argv: this.argv.slice(2), config: this.config, mock: this.mock });
    }
    out.exit(0);
  }

  get cmdAskingForHelp() {
    if (this.isCmdEdgeCase) return false;
    if (this.argv.find(arg => ['--help', '-h'].includes(arg))) {
      return true;
    }
    return false;
  }

  get isCmdEdgeCase() {
    let j = this.argv.indexOf('--');
    if (j !== -1) {
      for (var i = 0; i < j; i++) {
        if (['--help', '-h'].includes(this.argv[i])) return false;
      }
      return true;
    }
    return false;
  }
}
exports.default = Main;