'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('cli-engine-config');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rwlockfile = require('rwlockfile');

var _rwlockfile2 = _interopRequireDefault(_rwlockfile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Yarn {

  constructor(output, cwd) {
    this.out = output;
    this.config = output.config;
    this.cwd = cwd;
  }

  get version() {
    return require('../../package.json')['cli-engine']['yarnDependency'];
  }
  get lockfile() {
    return _path2.default.join(this.config.cacheDir, 'yarn.lock');
  }
  get bin() {
    return _path2.default.join(__dirname, '..', '..', 'yarn', `yarn-${this.version}.js`);
  }

  // https://github.com/yarnpkg/yarn/blob/master/src/constants.js#L73-L90
  pathKey() {
    let pathKey = 'PATH';

    // windows calls its path "Path" usually, but this is not guaranteed.
    if (process.platform === 'win32') {
      pathKey = 'Path';
      for (const key in process.env) {
        if (key.toLowerCase() === 'path') {
          pathKey = key;
        }
      }
    }
    return pathKey;
  }

  // https://github.com/yarnpkg/yarn/blob/master/src/util/execute-lifecycle-script.js#L130-L154
  pathEnv() {
    let pathKey = this.pathKey();
    const pathParts = (process.env[pathKey] || '').split(_path2.default.delimiter);
    pathParts.unshift(_path2.default.dirname(process.execPath));

    const env = {};
    env[pathKey] = pathParts.join(_path2.default.delimiter);
    return env;
  }

  fork(modulePath, args = [], options = {}) {
    const { fork } = require('child_process');
    return new Promise((resolve, reject) => {
      let forked = fork(modulePath, args, options);
      let error = '';

      forked.stdout.on('data', data => {
        if (this.config.debug) {
          process.stdout.write(data);
        }
      });

      forked.stderr.on('data', data => {
        if (this.config.debug) {
          process.stderr.write(data);
        }

        error += data;
      });

      forked.on('error', reject);
      forked.on('exit', code => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`yarn ${args.join(' ')} exited with code ${code}\n${error}`));
        }
      });
    });
  }

  async exec(args = []) {
    args = args.concat(['--non-interactive']).concat(Yarn.extraOpts);

    let options = {
      cwd: this.cwd,
      stdio: [null, null, null, 'ipc'],
      env: Object.assign({}, process.env, this.pathEnv())
    };

    this.out.debug(`${options.cwd}: ${this.bin} ${args.join(' ')}`);
    let unlock = await _rwlockfile2.default.write(this.lockfile);
    await this.fork(this.bin, args, options).catch(err => {
      unlock();
      throw err;
    }).then(unlock);
  }
}
exports.default = Yarn;
Yarn.extraOpts = [];